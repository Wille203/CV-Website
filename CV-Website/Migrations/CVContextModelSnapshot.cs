// <auto-generated />
using System;
using CV_Website.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CV_Website.Migrations
{
    [DbContext(typeof(CVContext))]
    partial class CVContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CVEducation", b =>
                {
                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.HasKey("CVId", "EducationId");

                    b.HasIndex("EducationId");

                    b.ToTable("CVEducation");

                    b.HasData(
                        new
                        {
                            CVId = 1,
                            EducationId = 1
                        },
                        new
                        {
                            CVId = 2,
                            EducationId = 2
                        },
                        new
                        {
                            CVId = 3,
                            EducationId = 3
                        },
                        new
                        {
                            CVId = 4,
                            EducationId = 4
                        },
                        new
                        {
                            CVId = 5,
                            EducationId = 5
                        },
                        new
                        {
                            CVId = 6,
                            EducationId = 6
                        });
                });

            modelBuilder.Entity("CVExperience", b =>
                {
                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.HasKey("CVId", "ExperienceId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("CVExperience");

                    b.HasData(
                        new
                        {
                            CVId = 1,
                            ExperienceId = 1
                        },
                        new
                        {
                            CVId = 2,
                            ExperienceId = 2
                        },
                        new
                        {
                            CVId = 3,
                            ExperienceId = 3
                        },
                        new
                        {
                            CVId = 4,
                            ExperienceId = 4
                        },
                        new
                        {
                            CVId = 5,
                            ExperienceId = 5
                        },
                        new
                        {
                            CVId = 6,
                            ExperienceId = 6
                        });
                });

            modelBuilder.Entity("CVSkills", b =>
                {
                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("CVId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("CVSkills");

                    b.HasData(
                        new
                        {
                            CVId = 1,
                            SkillsId = 1
                        },
                        new
                        {
                            CVId = 1,
                            SkillsId = 2
                        },
                        new
                        {
                            CVId = 2,
                            SkillsId = 3
                        },
                        new
                        {
                            CVId = 3,
                            SkillsId = 4
                        },
                        new
                        {
                            CVId = 4,
                            SkillsId = 5
                        },
                        new
                        {
                            CVId = 5,
                            SkillsId = 6
                        },
                        new
                        {
                            CVId = 6,
                            SkillsId = 7
                        });
                });

            modelBuilder.Entity("CV_Website.Models.CV", b =>
                {
                    b.Property<int>("CVId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CVId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CVId");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");

                    b.HasData(
                        new
                        {
                            CVId = 1,
                            UserId = "1"
                        },
                        new
                        {
                            CVId = 2,
                            UserId = "2"
                        },
                        new
                        {
                            CVId = 3,
                            UserId = "3"
                        },
                        new
                        {
                            CVId = 4,
                            UserId = "4"
                        },
                        new
                        {
                            CVId = 5,
                            UserId = "5"
                        },
                        new
                        {
                            CVId = 6,
                            UserId = "6"
                        });
                });

            modelBuilder.Entity("CV_Website.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationId");

                    b.ToTable("Education");

                    b.HasData(
                        new
                        {
                            EducationId = 1,
                            Name = "Bachelor in Computer Science"
                        },
                        new
                        {
                            EducationId = 2,
                            Name = "Master in Software Engineering"
                        },
                        new
                        {
                            EducationId = 3,
                            Name = "Diploma in Web Development"
                        },
                        new
                        {
                            EducationId = 4,
                            Name = "PhD in Artificial Intelligence"
                        },
                        new
                        {
                            EducationId = 5,
                            Name = "Bachelor in Data Science"
                        },
                        new
                        {
                            EducationId = 6,
                            Name = "Master in Machine Learning"
                        });
                });

            modelBuilder.Entity("CV_Website.Models.Experience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExperienceId");

                    b.ToTable("Experience");

                    b.HasData(
                        new
                        {
                            ExperienceId = 1,
                            Name = "Software Developer at XYZ Corp"
                        },
                        new
                        {
                            ExperienceId = 2,
                            Name = "Full Stack Developer at ABC Inc"
                        },
                        new
                        {
                            ExperienceId = 3,
                            Name = "Data Analyst at DataWorks"
                        },
                        new
                        {
                            ExperienceId = 4,
                            Name = "DevOps Engineer at Cloudify"
                        },
                        new
                        {
                            ExperienceId = 5,
                            Name = "Backend Developer at SecureSoft"
                        },
                        new
                        {
                            ExperienceId = 6,
                            Name = "Frontend Developer at BrightIdeas"
                        });
                });

            modelBuilder.Entity("CV_Website.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            MessageText = "Hello Bob, how are you?",
                            Read = false,
                            ReceiverId = "2",
                            SenderId = "1",
                            SenderName = "Alice"
                        },
                        new
                        {
                            MessageId = 2,
                            MessageText = "Hi Alice! I'm good, thank you!",
                            Read = true,
                            ReceiverId = "1",
                            SenderId = "2",
                            SenderName = "Bob"
                        },
                        new
                        {
                            MessageId = 3,
                            MessageText = "Hello Charlie, nice to meet you!",
                            Read = false,
                            ReceiverId = "3",
                            SenderId = "1",
                            SenderName = "Alice"
                        },
                        new
                        {
                            MessageId = 4,
                            MessageText = "Hi Alice, great to connect!",
                            Read = false,
                            ReceiverId = "1",
                            SenderId = "3",
                            SenderName = "Charlie"
                        },
                        new
                        {
                            MessageId = 5,
                            MessageText = "Hey Charlie, are you available for a call?",
                            Read = true,
                            ReceiverId = "3",
                            SenderId = "2",
                            SenderName = "Bob"
                        },
                        new
                        {
                            MessageId = 6,
                            MessageText = "Hi Bob, yes I am available. Let's talk!",
                            Read = false,
                            ReceiverId = "2",
                            SenderId = "3",
                            SenderName = "Charlie"
                        },
                        new
                        {
                            MessageId = 7,
                            MessageText = "Eve, I need your help with the project.",
                            Read = false,
                            ReceiverId = "5",
                            SenderId = "4",
                            SenderName = "Dave"
                        },
                        new
                        {
                            MessageId = 8,
                            MessageText = "Sure Dave, let me know the details.",
                            Read = true,
                            ReceiverId = "4",
                            SenderId = "5",
                            SenderName = "Eve"
                        },
                        new
                        {
                            MessageId = 9,
                            MessageText = "Alice, your portfolio is impressive!",
                            Read = false,
                            ReceiverId = "1",
                            SenderId = "6",
                            SenderName = "Frank"
                        },
                        new
                        {
                            MessageId = 10,
                            MessageText = "Dave, what do you think about the design?",
                            Read = true,
                            ReceiverId = "4",
                            SenderId = "1",
                            SenderName = "Alice"
                        },
                        new
                        {
                            MessageId = 11,
                            MessageText = "Alice, I love it! Great job.",
                            Read = false,
                            ReceiverId = "1",
                            SenderId = "4",
                            SenderName = "Dave"
                        },
                        new
                        {
                            MessageId = 12,
                            MessageText = "Eve, can you send me the updated files?",
                            Read = false,
                            ReceiverId = "5",
                            SenderId = "3",
                            SenderName = "Charlie"
                        });
                });

            modelBuilder.Entity("CV_Website.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Information")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            CreatorId = "1",
                            Description = "A portfolio website to showcase my projects.",
                            Information = "Demonstrates my skills and previous works.",
                            Title = "Personal Portfolio"
                        },
                        new
                        {
                            ProjectId = 2,
                            CreatorId = "2",
                            Description = "A web application to manage tasks.",
                            Information = "Tracks and manages daily tasks effectively.",
                            Title = "Task Manager App"
                        },
                        new
                        {
                            ProjectId = 3,
                            CreatorId = "3",
                            Description = "An online platform for buying and selling products.",
                            Information = "Enables secure online transactions.",
                            Title = "E-Commerce Platform"
                        },
                        new
                        {
                            ProjectId = 4,
                            CreatorId = "4",
                            Description = "A chatbot powered by AI.",
                            Information = "Provides personalized assistance to users.",
                            Title = "AI Assistant"
                        },
                        new
                        {
                            ProjectId = 5,
                            CreatorId = "5",
                            Description = "An app to monitor fitness activities.",
                            Information = "Helps users track their workouts and progress.",
                            Title = "Fitness Tracker"
                        },
                        new
                        {
                            ProjectId = 6,
                            CreatorId = "6",
                            Description = "A platform for online courses.",
                            Information = "Offers a variety of courses across domains.",
                            Title = "Online Learning Platform"
                        });
                });

            modelBuilder.Entity("CV_Website.Models.Skills", b =>
                {
                    b.Property<int>("SkillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillsId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillsId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillsId = 1,
                            Name = "C#"
                        },
                        new
                        {
                            SkillsId = 2,
                            Name = "ASP.NET"
                        },
                        new
                        {
                            SkillsId = 3,
                            Name = "JavaScript"
                        },
                        new
                        {
                            SkillsId = 4,
                            Name = "SQL"
                        },
                        new
                        {
                            SkillsId = 5,
                            Name = "Python"
                        },
                        new
                        {
                            SkillsId = 6,
                            Name = "React"
                        },
                        new
                        {
                            SkillsId = 7,
                            Name = "Docker"
                        },
                        new
                        {
                            SkillsId = 8,
                            Name = "Kubernetes"
                        },
                        new
                        {
                            SkillsId = 9,
                            Name = "AWS"
                        },
                        new
                        {
                            SkillsId = 10,
                            Name = "Machine Learning"
                        });
                });

            modelBuilder.Entity("CV_Website.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Address = "Drottninggatan 10",
                            ConcurrencyStamp = "5de126ad-e039-4d97-b239-d21726952039",
                            Email = "alice@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Alice",
                            Password = "password123",
                            PhoneNumber = "+46701234567",
                            PhoneNumberConfirmed = false,
                            Private = false,
                            SecurityStamp = "eb7cf0b9-91c1-434f-8094-bc2b0a02dfb7",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Address = "Storgatan 5",
                            ConcurrencyStamp = "460f46e0-dbce-4e99-b324-024e5e8dc2f2",
                            Email = "bob@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Bob",
                            Password = "securepassword",
                            PhoneNumber = "0701234567",
                            PhoneNumberConfirmed = false,
                            Private = true,
                            SecurityStamp = "bef2b2a2-5563-4678-93bd-2f94716c4fc2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Address = "Kungsgatan 18",
                            ConcurrencyStamp = "6836552d-e067-438d-8579-798cbf507c1c",
                            Email = "charlie@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Charlie",
                            Password = "charlie123",
                            PhoneNumber = "+46761234567",
                            PhoneNumberConfirmed = false,
                            Private = false,
                            SecurityStamp = "cc82783a-4cf7-49d3-aefe-e787524630fc",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Address = "Östra Långgatan 22",
                            ConcurrencyStamp = "d6a8fee8-6145-4b97-99bf-f34435bd76cf",
                            Email = "dave@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Dave",
                            Password = "dave456",
                            PhoneNumber = "0761234567",
                            PhoneNumberConfirmed = false,
                            Private = false,
                            SecurityStamp = "4ac42cb3-e152-440f-886c-145033fd4f38",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Address = "Västra Vallgatan 4",
                            ConcurrencyStamp = "b7c43df8-44cf-4660-a394-a089651f572e",
                            Email = "eve@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Eve",
                            Password = "eve789",
                            PhoneNumber = "+46731234567",
                            PhoneNumberConfirmed = false,
                            Private = true,
                            SecurityStamp = "7855f0ad-a7aa-410d-878f-c36b8f4a1970",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Address = "Kyrkogatan 8",
                            ConcurrencyStamp = "13031436-e807-4cbd-a5e2-fc45f80c4e05",
                            Email = "frank@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Frank",
                            Password = "frank101",
                            PhoneNumber = "0731234567",
                            PhoneNumberConfirmed = false,
                            Private = false,
                            SecurityStamp = "1652b92a-af95-4b0a-a14a-651a176a00b4",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("UsersId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ProjectUsers", (string)null);

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            UsersId = "1"
                        },
                        new
                        {
                            ProjectId = 1,
                            UsersId = "2"
                        },
                        new
                        {
                            ProjectId = 2,
                            UsersId = "3"
                        },
                        new
                        {
                            ProjectId = 3,
                            UsersId = "4"
                        },
                        new
                        {
                            ProjectId = 4,
                            UsersId = "5"
                        },
                        new
                        {
                            ProjectId = 5,
                            UsersId = "6"
                        });
                });

            modelBuilder.Entity("CVEducation", b =>
                {
                    b.HasOne("CV_Website.Models.CV", null)
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Website.Models.Education", null)
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVExperience", b =>
                {
                    b.HasOne("CV_Website.Models.CV", null)
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Website.Models.Experience", null)
                        .WithMany()
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVSkills", b =>
                {
                    b.HasOne("CV_Website.Models.CV", null)
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Website.Models.Skills", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CV_Website.Models.CV", b =>
                {
                    b.HasOne("CV_Website.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CV_Website.Models.Message", b =>
                {
                    b.HasOne("CV_Website.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CV_Website.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CV_Website.Models.Project", b =>
                {
                    b.HasOne("CV_Website.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CV_Website.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CV_Website.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Website.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CV_Website.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("CV_Website.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Website.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CV_Website.Models.User", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
