// <auto-generated />
using CV_Website.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CV_Website.Migrations
{
    [DbContext(typeof(CVContext))]
<<<<<<<< HEAD:CV-Website/Migrations/20250107012251_nya.Designer.cs
    [Migration("20250107012251_nya")]
    partial class nya
========
    [Migration("20250106171316_ny")]
    partial class ny
>>>>>>>> main:CV-Website/Migrations/20250106171316_ny.Designer.cs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CVEducation", b =>
                {
                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<int>("EducationId")
                        .HasColumnType("int");

                    b.HasKey("CVId", "EducationId");

                    b.HasIndex("EducationId");

                    b.ToTable("CVEducation");
                });

            modelBuilder.Entity("CVExperience", b =>
                {
                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<string>("ExperienceId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CVId", "ExperienceId");

                    b.HasIndex("ExperienceId");

                    b.ToTable("CVExperience");
                });

            modelBuilder.Entity("CVSkills", b =>
                {
                    b.Property<int>("CVId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("CVId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("CVSkills");
                });

            modelBuilder.Entity("CV_Website.Models.CV", b =>
                {
                    b.Property<int>("CVId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CVId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CVId");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");

                    b.HasData(
                        new
                        {
                            CVId = 1,
                            UserId = 1
                        },
                        new
                        {
                            CVId = 2,
                            UserId = 2
                        },
                        new
                        {
                            CVId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("CV_Website.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationId");

                    b.ToTable("Education");

                    b.HasData(
                        new
                        {
                            EducationId = 1,
                            Name = "Bachelor in Computer Science"
                        },
                        new
                        {
                            EducationId = 2,
                            Name = "Master in Software Engineering"
                        },
                        new
                        {
                            EducationId = 3,
                            Name = "Diploma in Web Development"
                        });
                });

            modelBuilder.Entity("CV_Website.Models.Experience", b =>
                {
                    b.Property<string>("ExperienceId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExperienceId");

                    b.ToTable("Experience");

                    b.HasData(
                        new
                        {
                            ExperienceId = "1",
                            Name = "Software Developer at XYZ Corp"
                        },
                        new
                        {
                            ExperienceId = "2",
                            Name = "Full Stack Developer at ABC Inc"
                        },
                        new
                        {
                            ExperienceId = "3",
                            Name = "Data Analyst at DataWorks"
                        });
                });

            modelBuilder.Entity("CV_Website.Models.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MessageId"));

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int?>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("SenderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MessageId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = 1,
                            MessageText = "Hello Bob, how are you?",
                            Read = false,
                            ReceiverId = 2,
                            SenderId = 1,
                            SenderName = "Alice"
                        },
                        new
                        {
                            MessageId = 2,
                            MessageText = "Hi Alice! I'm good, thank you!",
                            Read = true,
                            ReceiverId = 1,
                            SenderId = 2,
                            SenderName = "Bob"
                        },
                        new
                        {
                            MessageId = 3,
                            MessageText = "Hello Charlie, nice to meet you!",
                            Read = false,
                            ReceiverId = 3,
                            SenderId = 1,
                            SenderName = "Alice"
                        },
                        new
                        {
                            MessageId = 4,
                            MessageText = "Hi Alice, great to connect!",
                            Read = false,
                            ReceiverId = 1,
                            SenderId = 3,
                            SenderName = "Charlie"
                        },
                        new
                        {
                            MessageId = 5,
                            MessageText = "Hey Charlie, are you available for a call?",
                            Read = true,
                            ReceiverId = 3,
                            SenderId = 2,
                            SenderName = "Bob"
                        },
                        new
                        {
                            MessageId = 6,
                            MessageText = "Hi Bob, yes I am available. Let's talk!",
                            Read = false,
                            ReceiverId = 2,
                            SenderId = 3,
                            SenderName = "Charlie"
                        });
                });

            modelBuilder.Entity("CV_Website.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Information")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            CreatorId = 1,
                            Description = "A portfolio website to showcase my projects.",
                            Information = "This is my personal portfolio created to demonstrate my skills and previous works.",
                            Title = "Personal Portfolio"
                        },
                        new
                        {
                            ProjectId = 2,
                            CreatorId = 2,
                            Description = "A web application to manage tasks efficiently.",
                            Information = "This app helps users track and manage their daily tasks effectively.",
                            Title = "Task Manager App"
                        },
                        new
                        {
                            ProjectId = 3,
                            CreatorId = 3,
                            Description = "An online platform for buying and selling products.",
                            Information = "This platform enables users to buy and sell products online with secure payment methods.",
                            Title = "E-Commerce Platform"
                        });
                });

            modelBuilder.Entity("CV_Website.Models.Skills", b =>
                {
                    b.Property<int>("SkillsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillsId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillsId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            SkillsId = 1,
                            Name = "C#"
                        },
                        new
                        {
                            SkillsId = 2,
                            Name = "ASP.NET"
                        },
                        new
                        {
                            SkillsId = 3,
                            Name = "JavaScript"
                        },
                        new
                        {
                            SkillsId = 4,
                            Name = "SQL"
                        });
                });

            modelBuilder.Entity("CV_Website.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Private")
                        .HasColumnType("bit");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Address = "123 Wonderland St",
                            Email = "alice@example.com",
                            Name = "Alice",
                            Password = "password123",
                            Private = false
                        },
                        new
                        {
                            UserId = 2,
                            Address = "456 Nowhere Ave",
                            Email = "bob@example.com",
                            Name = "Bob",
                            Password = "securepassword",
                            Private = true
                        },
                        new
                        {
                            UserId = 3,
                            Address = "789 Cloud Ln",
                            Email = "charlie@example.com",
                            Name = "Charlie",
                            Password = "charlie123",
                            Private = false
                        });
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("ProjectUsers", (string)null);
                });

            modelBuilder.Entity("CVEducation", b =>
                {
                    b.HasOne("CV_Website.Models.CV", null)
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Website.Models.Education", null)
                        .WithMany()
                        .HasForeignKey("EducationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVExperience", b =>
                {
                    b.HasOne("CV_Website.Models.CV", null)
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Website.Models.Experience", null)
                        .WithMany()
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CVSkills", b =>
                {
                    b.HasOne("CV_Website.Models.CV", null)
                        .WithMany()
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Website.Models.Skills", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CV_Website.Models.CV", b =>
                {
                    b.HasOne("CV_Website.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CV_Website.Models.Message", b =>
                {
                    b.HasOne("CV_Website.Models.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CV_Website.Models.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CV_Website.Models.Project", b =>
                {
                    b.HasOne("CV_Website.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ProjectUser", b =>
                {
                    b.HasOne("CV_Website.Models.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CV_Website.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CV_Website.Models.User", b =>
                {
                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
